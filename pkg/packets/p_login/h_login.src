//--------------------------------------------------------------------------------

use uo;
use os;

//--------------------------------------------------------------------------------

include "include/cmds/uof";
include "include/logerror";
include "include/const/misc";
include "include/misc";

include ":character:creation";

//--------------------------------------------------------------------------------

const PASS_MLEN    :=  20;
const LOGIN_MLEN   :=  20;

const PL_STR_SIZE  :=  30;
const PL_FLAG_1    :=  0xE0;
const PL_FLAG_2    :=  0x48;
const PL_FLAG_3    :=  0xC0;
const MW_DIGITS    :=  (0x4D + 0x57);

//--------------------------------------------------------------------------------

program HandleLoginFuncs()
  print("[0x80]: Login");
  print("[0xA0]: Login Svs");
  print("[0x91]: Post Login");
  print("[0x5D]: Pre Login");
  return 1;
endprogram

//--------------------------------------------------------------------------------

exported function HandleLogin(who, byref Packet)

  __ParamUnused(who);

  var Checks := array;

  Checks[1]  := Packet.GetInt8(PL_STR_SIZE)     & PL_FLAG_1;
  Checks[2]  := Packet.GetInt8(PL_STR_SIZE*2)   & PL_FLAG_1;
  Checks[3]  := Packet.GetInt8(PL_STR_SIZE-1)   & PL_FLAG_2;
  Checks[4]  := Packet.GetInt8(PL_STR_SIZE*2-1) & PL_FLAG_2;
  Checks[5]  := Packet.GetInt8(PL_STR_SIZE*2-2) & PL_FLAG_3;

  if(!Checks[1] or !Checks[2] or !Checks[3] or !Checks[4] or !Checks[5])
    LogError("[HandleLogin] Lvl1: ["+Checks[1]+","+Checks[2]+","+Checks[3]+","+Checks[4]+","+Checks[5]+"]", LOGF_FORCE_SYSLOG | LOGF_NO_NEED | LOGF_SCRIPTS);
  else

    var mwgVer := Packet.GetInt32(PL_STR_SIZE-5);

    if(mwgVer != MWG_VERSION)
      LogError("[HandleLogin] Nie prawidlowa wersja MW Gate ("+VerToStr(mwgVer)+").", LOGF_FORCE_SYSLOG | LOGF_GENERAL);
    else

      var Byte, i;

      for(i:=1; i<=LOGIN_MLEN; i:=i+1)
        Byte := (~(Packet.GetInt8(i) - (i*2)) & 0xFF);
        Packet.SetInt8(i, Byte);
      endfor

      for(i:=31; i<=PASS_MLEN+30; i:=i+1)
        Byte := (~(Packet.GetInt8(i) + i) & 0xFF);
        Packet.SetInt8(i, Byte);
      endfor
      
      Packet.SetInt8(PL_STR_SIZE, 0);
      Packet.SetInt8(PL_STR_SIZE*2, 0);
      Packet.SetInt8(PL_STR_SIZE-1, 0);
      Packet.SetInt8(PL_STR_SIZE*2-1, 0);
      Packet.SetInt8(PL_STR_SIZE*2-2, 0);
      Packet.SetInt32(PL_STR_SIZE-5, 0);
      
//      var Login  := Packet.GetString(1, 30);
//      var Passwd := Packet.GetString(31, 30);

      return 0;
    endif
  endif

  var i;

  for(i:=0; i<PL_STR_SIZE; i+=1)
    Packet.SetInt8(i+1, 0);
    Packet.SetInt8(i+31, 0);
  endfor

  return 0;

endfunction

//--------------------------------------------------------------------------------

exported function HandleServSelect(who,byref Packet)

  __ParamUnused(who);

  Packet.SetInt8(1,0);
  Packet.SetInt8(2,((Packet.GetInt8(2) - MW_DIGITS) & 0xFF));
  
  if(Packet.GetInt8(2) > 10)
    LogError("[HandleLogin] HandleServSelect: Lvl2: "+Packet.GetInt8(2), LOGF_FORCE_SYSLOG | LOGF_NO_NEED | LOGF_SCRIPTS);
  endif
  
  return 0;

endfunction

//--------------------------------------------------------------------------------

exported function HandlePostLogin(who, byref Packet)

  __ParamUnused(who);

  var Checks := array;

  Checks[1] := Packet.GetInt8(PL_STR_SIZE+3)   & PL_FLAG_1;
  Checks[2] := Packet.GetInt8(PL_STR_SIZE*2+3) & PL_FLAG_1;

  Checks[3] := Packet.GetInt8(PL_STR_SIZE+4)   & PL_FLAG_2;
  Checks[4] := Packet.GetInt8(PL_STR_SIZE*2+4) & PL_FLAG_2;

  if(Checks[1] and Checks[2] and Checks[3] and Checks[4])

    var Byte, i;

    for(i:=0; i<LOGIN_MLEN; i:=i+1)
      Byte := (~(Packet.GetInt8(i+5) + i) & 0xFF);
      Packet.SetInt8(i+5, Byte);
    endfor

    for(i:=0; i<PASS_MLEN; i:=i+1)
      Byte := (~(Packet.GetInt8(i+35) + (i*2)) & 0xFF);
      Packet.SetInt8(i+35, Byte);
    endfor
    
    Packet.SetInt8(PL_STR_SIZE+3, 0);
    Packet.SetInt8(PL_STR_SIZE*2+3, 0);

    Packet.SetInt8(PL_STR_SIZE+4, 0);
    Packet.SetInt8(PL_STR_SIZE*2+4, 0);

  else
    LogError("[HandleLogin] HandlePostLogin: Lvl3: ["+Checks[1]+","+Checks[2]+","+Checks[3]+","+Checks[4]+"]", LOGF_FORCE_SYSLOG | LOGF_SCRIPTS);

    var i;

    for(i:=0; i<PL_STR_SIZE; i:=i+1)
      Packet.SetInt8(i+5, 0);
      Packet.SetInt8(i+35, 0);
    endfor
  endif

  return 0;

endfunction

//--------------------------------------------------------------------------------

exported function HandlePreLogin(who, byref Packet)

  var Slot := Packet.GetInt32(65);
  var Key  := Packet.GetInt32(69);

  if(Slot < 0 or Slot > MAX_CHAR_ON_ACC-1 or !Key)
    LogError("[HandleLogin] PreLogin Error: IP: ["+who.ip+"] Slot: ["+Slot+"] Key: ["+Key+"]", LOGF_SCRIPTS);
    LogError("[HandleLogin] PreLogin Error Packet: "+CStr(Packet), LOGF_SCRIPTS);
    return 1;
  endif

  var Account := FindAccount(who.account);
  var Char := Account.GetCharacter(Slot+1);

  if(!Char)
    Account.AddCharacter(Slot+1);
    Char := Account.GetCharacter(Slot+1);
    ProcessCharacterCreation(Char);
  endif

  return 0;

endfunction

//--------------------------------------------------------------------------------

exported function CharacterList(who, byref Packet)

  __ParamUnused(who);

  var i;

  for(i:=0; i<5; i+=1)
    if(i == 4)
      Packet.SetString(4+i*60, "<---- NIEDOSTEPNY ---->", 0);
    else
      var CharName := Packet.GetString(4+i*60, 30);
      if(!CharName)
        Packet.SetString(4+i*60, "***                    <Nowa>", 0);
      endif
    endif
  endfor

  return 0;

endfunction

//--------------------------------------------------------------------------------
