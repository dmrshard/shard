//-----------------------------------------------------------------------------// Modified: 2005-05-08//-----------------------------------------------------------------------------use os;use uo;use cfgfile;use util;//-----------------------------------------------------------------------------include "include/packets";include "include/bits";include "include/client/fonts";include "include/const/cfgs";include "include/const/eventid";include "include/const/misc";include "include/speech";include "include/misc";include ":drinkitems:drunk";//-----------------------------------------------------------------------------const WULG_EMOTE             := "*klnie*";const BELK_EMOTE             := "*belkocze*";const MAX_WORD_LEN           := 20;const FLOOD_TIME             := 3;const CHANGE_EMOTE_COLOR     := 95;const SEND_EMOTE_COLOR       := COLOR_GOLDMETAL;const SPTYPE_GUILD           := 0xD;const SPTYPE_ALLIANCE        := 0xE;//-----------------------------------------------------------------------------var Unics       := ReadConfigFile(UNICS_CFG);var bWords      := ReadConfigFile(BWORDS_CFG);var cWords      := ReadConfigFile(CWORDS_CFG);var Emotes      := ReadConfigFile(EMOTES_CFG);var bMaxId      := GetConfigMaxIntKey(bWords);var cMaxId      := GetConfigMaxIntKey(cWords);var eMaxId      := GetConfigMaxIntKey(Emotes);var AscPcSet    := 15;//-----------------------------------------------------------------------------program MiscPackets()  print("[0xAD]: Speech");  return 1;endprogram//-----------------------------------------------------------------------------exported function RequestSpeech(who, byref Packet)  if(who.squelched)    return 1;  endif  var Size   := Packet.GetInt16(1);  var SpType := Packet.Getint8(3);  var Msg;  if(SpType & 0xC0)    AscPcSet := (Packet.GetInt16(12) & 0xFFF);    Shr(AscPcSet,4);    AscPcSet := 15 + ((AscPcSet / 2)*3) + (AscPcSet%2) - 1;    Msg := CAscZ(Packet.GetString(AscPcSet,(Size - AscPcSet)));  else    Msg := Packet.GetUnicodeString(12,(Size - 12)/2);  endif  if(Msg[1] == 0x2E or Msg[1] == 0x3D)    return 0;  elseif(SpType & 0xF == SPTYPE_GUILD or SpType & 0xF == SPTYPE_ALLIANCE)    return 1;  endif  var Last   := GetObjProperty(who,"#lSpeech");  if(Last[2] == Msg and Last[1] + FLOOD_TIME > ReadGameClock() and !who.cmdlevel)    return 1;  endif  SetObjProperty(who,"#lSpeech",{ReadGameClock(),Msg});  var Test   := array;  var mWords := array(array);  var mLow   := array;  var Chr,i,Pos;  foreach mChr in Msg    Chr := mChr;    if(Unics[Chr])      Chr := Unics[Chr].Chr;    endif    if((Chr >= 0x41 and Chr <= 0x5A) or (Chr >= 0x61 and Chr <= 0x7A))      if(Chr < 0x61)        Chr := Chr + 0x20;      endif      if(Test[Test.size()] != Chr)        Test.append(Chr);      endif      mWords[mWords.size()].append(Chr);    endif    if(Chr == 0x20)      if(mWords[mWords.size()].size())        mWords[mWords.size()] := CChrZ(mWords[mWords.size()]);        mWords.append(array);      endif    endif    mLow.Append(Chr);  endforeach  Test := CChrZ(Test);  if(!mWords[mWords.size()].size())    mWords.erase(mWords.size());  else    mWords[mWords.size()] := CChrZ(mWords[mWords.size()]);  endif    var cenzor := CInt(GetObjProperty(who,"cenzor"));  if(!who.cmdlevel)    foreach Word in mWords      if(len(Word) > MAX_WORD_LEN)        CreateEmote(who,Packet,BELK_EMOTE);        return 0;      endif      for(i:=1;i<=cMaxId;i:=i+1)        if(cWords[i].Equal)          if(Word == cWords[i].Word)            CreateEmote(who,Packet,cWords[i].Rep);            return 0;          endif        else          Pos := CheckWord(Word,cWords[i].Word,DEF_SP_INWORD,cWords[i].Direct);          if(Pos)            if(cWords[i].MinPos)              if(Pos > cWords[i].MinPos and (len(Word) - Pos) > cWords[i].MaxPos)                continue;              endif            endif            CreateEmote(who,Packet,cWords[i].Rep);            return 0;          endif        endif      endfor    endforeach    for(i:=1;i<=bMaxId;i:=i+1)      if(CheckWord(Test,bWords[i].Word,bWords[i].Sp))        if(!cenzor)              CreateEmote(who,Packet,WULG_EMOTE);          return 0;        endif      endif      sleepms(1);    endfor  endif  Test := CChrZ(mLow);  if(Test[":"] or Test[";"] or Test["x"])    var sEms := dictionary;    var Ex;    for(i:=1;i<=eMaxId;i:=i+1)      Ex := 0;      TestEmote(mLow,Msg,Test,Ex,Emotes[i].Em);      if(Ex)        sEms[Emotes[i].Rep] := 1;      endif    endfor    foreach Em in (sEms.keys())      SendEmote(who,Packet, Em);    endforeach  endif  Test := array;  foreach Chr in Msg    if((Chr >= 0x30 and Chr <= 0x39) or (Chr >= 0x41 and Chr <= 0x5A) or (Chr >= 0x61 and Chr <= 0x7A) or Unics[Chr] or Chr == 0x20 or Chr == 0x2E or Chr == 0x2C or Chr == 0x21 or Chr == 0x3F)      Test.append(Chr);    endif  endforeach  if(Test.size())    if(GetSpType(Packet) == EMOTE_TYPE)      Test.insert(1,42);      Test.append(42);    else       var Drunkness := GetDrunkPercentage(who);      if(Drunkness)        ModifyTextByDrunkness(Test, Drunkness);      endif    endif    SetPacketText(Packet, Test);    return 0;  endif  return 1;endfunction//-----------------------------------------------------------------------------function SetPacketText(byref Packet, byref Text)  if(Packet.GetInt8(3) & 0xC0)    Packet.SetString(AscPcSet,CChrZ(Text),1);  else    Packet.SetUnicodeString(12,Text,1);  endif  endfunction//-----------------------------------------------------------------------------function SetPacketType(byref Packet, Type)  if(Packet.GetInt8(3) & 0xC0)    Packet.SetInt8(3,Type + 0xC0);  else    Packet.SetInt8(3,Type);  endif  endfunction//-----------------------------------------------------------------------------function GetSpType(byref Packet)  if(Packet.GetInt8(3) & 0xC0)    return Packet.GetInt8(3) - 0xC0;  else    return Packet.GetInt8(3);  endifendfunction//-----------------------------------------------------------------------------function CreateEmote(who, byref Packet, byref Emote)  SetPacketText(Packet,CAscZ(Emote));  SetPacketType(Packet,EMOTE_TYPE);  Packet.SetInt16(4,CHANGE_EMOTE_COLOR);endfunction//-----------------------------------------------------------------------------function SendEmote(who, byref Packet, byref Emote)  var Parms := array;  Parms[1]  := who;  Parms[2]  := CAscZ(Emote);  Parms[3]  := EMOTE_TYPE;  Parms[4]  := SEND_EMOTE_COLOR;  Parms[5]  := Packet.GetInt16(6);  start_script("send_sp",Parms);endfunction//-----------------------------------------------------------------------------function ModifyTextByDrunkness(byref Text, Drunkness)  // przy max upojeniu - 80% na seplenienie poszczegolnych slow.  Drunkness := CInt(Drunkness * 0.8);  var i, m, Let, lBreak := 1;  for(i:=1;i<=Text.size();i:=i+1)    if(Drunkness > RandomInt(100))      if(!IsBreakTextChar(Text[i]))        for(m:=ToMin(i, lBreak+3);m<=i+6;m:=m+1)          if(IsBreakTextChar(Text[m]))            m := m - 1;            break;          endif          if(m == Text.size())            break;          endif        endfor        if(m > i+5)          m := i+5;        endif        if(m > i+1)          m       := ToMax(lBreak + RandomInt(m-lBreak)+1, Text.size());          Let     := Text[m];          Text[m] := Text[i];          Text[i] := Let;        endif      else        lBreak := i+1;      endif    endif  endfor  for(i:=1;i<=Text.size();i:=i+1)    if(Drunkness > RandomInt(100) and RandomInt(100) < 75)      if(IsVowel(Text[i]))        m := RandomInt(CInt(Drunkness/3))+1;        for y := 1 to m          Text.insert(i, Text[i]);        endfor        i := i + m;      endif    endif  endforendfunction//-----------------------------------------------------------------------------function IsVowel(Let)  return Let == 0x41 or Let == 0x61 or Let == 0x45 or Let == 0x65 or Let == 0x49 or Let == 0x69 or Let == 0x4F or Let == 0x6F or Let == 0x55 or Let == 0x75 or Let == 0x59 or Let == 0x79;endfunction//-----------------------------------------------------------------------------function IsBreakTextChar(Chr)  return Chr == 0x20 or Chr == 0x2E or Chr == 0x2C or Chr == 0x21 or Chr == 0x3F;endfunction//-----------------------------------------------------------------------------