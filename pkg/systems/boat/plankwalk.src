use os;
use uo;

//-----------------------------------------------------------------------------

include "plankutil";
include "include/move";

//-----------------------------------------------------------------------------

/*
 * the searchoffset matrix is for an east-facing plank.
 * these will have to be rotated for the other positions
 *   P is the plank, N is where you can't step (otherwise
 *    this teleportation stuff wouldn't be necessary)
 *
 *        13 12 11
 *        14  5  4
 *        15  6  2
 *        16  7  1 N P
 *        17  8  3
 *        18  9 10
 *        19 20 21
 *
 */

var searchoffset := {
  { -2,  0 },          //  1
  { -2, -1 },
  { -2, +1 },
  { -2, -2 },
  { -3, -2 },          //  5
  { -3, -1 },
  { -3,  0 },
  { -3, +1 },
  { -3, +2 },
  { -2, +2 },          // 10
  { -2, -3 },
  { -3, -3 },
  { -4, -3 },
  { -4, -2 },
  { -4, -1 },          // 15
  { -4,  0 },
  { -4, +1 },
  { -4, +2 },
  { -4, +3 },
  { -3, +3 },          // 20
  { -2, +3 },
  { -5,  0 },
  { -5, +2 },
  { -5, +3 },
  { -5, +4 },
  { -4, +4 },          // 20
  { -3, +4 },
  { -6,  0 },
  { -6, +3 },
  { -6, +4 },
  { -6, +5 },
  { -5, +5 },          // 20
  { -4, +5 }
};

program plankwalk( who, plank, lastx, lasty, lastz )
  
  if(!IsPlayer(who))
    return;
  endif
    
  if (!FindKey( who, plank ))
    if (plank.locked)
      var sh := GetStandingHeight( lastx, lasty, lastz, who.realm );
      if (!sh || !sh.multi || sh.multi.serial != plank.multi.serial)
        MoveObject( who, lastx, lasty, lastz, who.realm, MOVECHAR_FORCELOCATION );
        return;
      endif
    endif
  endif

  if(ListMobilesNearLocation( plank.x, plank.y, plank.z, 0, plank.realm ).size() > 1)
    MoveObject( who, lastx, lasty, lastz, plank.realm, MOVECHAR_FORCELOCATION );
    return;
  endif

  var xidx, yidx, xmul, ymul;

  case (plank.graphic)
      GID_PLANK_EXTENDED_FACING_WEST:
          if (! (who.facing in { DIR_W, DIR_NW, DIR_SW }))
            return;
          endif
          xidx := 1;
          yidx := 2;
          xmul := 1;
          ymul := 1;

      GID_PLANK_EXTENDED_FACING_EAST:
          if (! (who.facing in { DIR_E, DIR_NE, DIR_SE }))
            return;
          endif
          xidx := 1;
          yidx := 2;
          xmul := -1; // flip across x-axis
          ymul := 1;

      GID_PLANK_EXTENDED_FACING_NORTH:
          if (! (who.facing in { DIR_N, DIR_NE, DIR_NW }))
             return;
          endif
          xidx := 2;
          yidx := 1;
          xmul := 1;
          ymul := +1;

      GID_PLANK_EXTENDED_FACING_SOUTH:
          if (! (who.facing in { DIR_S, DIR_SE, DIR_SW }))
            return;
          endif
          xidx := 2;
          yidx := 1;
          xmul := 1;
          ymul := -1; // flip across y-axis

      default:
          return;
  endcase
  if (PlankCanMove( who,
               searchoffset[1][xidx] * xmul / 2,
               searchoffset[1][yidx] * ymul / 2 ))
    return;                     // doesn't need our help!
  endif


  foreach offset in searchoffset
    if (TryMove( who, offset[xidx] * xmul, offset[yidx] * ymul ))
      return;
    endif
  endforeach
endprogram

//-----------------------------------------------------------------------------

function TryMove( who, dx, dy )
  var res := 0;
  set_critical( 1 );

  var tryx := who.x + dx;
  var tryy := who.y + dy;
  var h := GetStandingHeight( tryx, tryy, who.z, who.realm );
  if (h && (not h.multi)) // CHECKME should check line of sight?
    MoveObject( who, tryx, tryy, h.z );
    res := 1;
  endif

  set_critical(0);
  return res;
endfunction

//-----------------------------------------------------------------------------

function PlankCanMove( who, dx, dy )
  var tryx := who.x + dx;
  var tryy := who.y + dy;
  var h := GetStandingHeight( tryx, tryy, who.z, who.realm );
  if (h)
    return 1;
  else
    return 0;
  endif
endfunction

//-----------------------------------------------------------------------------
