//-----------------------------------------------------------------------------

include ":magic:magicatt";
include "../magicitems/magicitems";
include "include/tempmods";
include "include/const/misc";
include "include/player/misc";
include "include/mobile/npcs/specs";
include "include/npcs";
include "include/events";
include "include/poison";
include "include/calc";

include "../pkg/systems/tourney/tourney";
include ":artifacts:artifacts";

//-----------------------------------------------------------------------------

const DEF_UNDEAD_NRESIST     := 50;

//-----------------------------------------------------------------------------

program DoMagicalDamage(DmgParms)

  var Caster    := DmgParms[1];
  var CastOn    := DmgParms[2];
  var Dmg       := Dmgparms[3];
  var DmgType   := DmgParms[4];
  var Circle    := DmgParms[5];
  var SpellType := DmgParms[6];
  var Flags     := DmgParms[7];
  
  if(!CastOn or !Caster)
    return;
  endif
  
  if(CastOn.isa(POLCLASS_MOBILE) and !CastOn.dead)
    if(IsPlayer(Caster))
      SetScriptController(Caster);
    endif

    Dmg := ProtectedFromDmg(Caster, CastOn, DmgType, Dmg);
    
    if(Dmg <= 0)
      Dmg := 1;
    endif

    if(!SpellType)
      SpellType := SPTYPE_NONE;
    endif

    if(CastOn.isa(POLCLASS_NPC))
      Dmg := Dmg * NPC_DMG_MULTIPLIER;
    endif

    var CrimDT;
    case(DmgType)
      DMGTYPE_FIRE:     CrimDT := "Fire";
      DMGTYPE_COLD:     CrimDT := "Cold";
      DMGTYPE_ELECTRIC: CrimDT := "Electric";
      DMGTYPE_MISC:     CrimDT := "Misc";
      DMGTYPE_POISON:   CrimDT := "Poison";
      default:          CrimDT := "Err";
    endcase

    var CrimST;
    case(SpellType)
      SPTYPE_NONE:    CrimST := "None";
      SPTYPE_MAGE:    CrimST := "Mage";
      SPTYPE_DRUID:   CrimST := "Druid";
      SPTYPE_NECRO:   CrimST := "Necro";
      SPTYPE_VAMPIRE: CrimST := "Vampire";
      default:        CrimST := "Err";
    endcase

    var rResult;

    if(Circle)
      rResult := ResistedExtended(CastOn, Caster, Dmg, Circle, SpellType, Flags);
      Dmg := rResult.value;
    endif
  
    if(CastOn.isa(POLCLASS_NPC))
      var Res     := 0;
      var Elems   := GetNpcElementals(CastOn);
      var cfgElem := cfgElem;

      case(DmgType)
        DMGTYPE_FIRE:     var curRes := BreakNpcSpecial(CastOn, NSPEC_CURSE, Dmg);
                          if(curRes > 0)
                            SendSysMessage(Caster, "Przerwal"+ggm(Caster,3)+" koncentracje "+GetName(CastOn)+"!", FONT_NORMAL, COLOR_WHITE);
                          elseif(curRes < 0)
                            SendSysMessage(Caster, "Prawie przerwal"+ggm(Caster,3)+" koncentracje "+GetName(CastOn)+"!", FONT_NORMAL, COLOR_ORANGE);
                          endif
                          
                          if(NPCELEM_FIRE in Elems)
                            if(CanGetCriminal(Caster, CastOn, TGTOPT_HELPFUL))
                              LogCriminal(Caster, "0", "Rzucil czar typu [ST: "+CrimST+", DT: "+CrimDT+", Ci: "+Circle+"] na Npca [Elem: "+NPCELEM_FIRE+"] "+CastOn.name+" ["+CastOn.serial+"] i go uleczyl.");
                            endif

                            HealMobile(CastOn, Dmg, Caster, 1);
                            return;
                          elseif(NPCELEM_COLD in Elems)
                            Dmg := CInt(Dmg * 1.2);
                          endif

                          Res := CInt(cfgElem.FResist);
                          
        DMGTYPE_COLD:     
                          var curRes := BreakNpcSpecial(CastOn, NSPEC_CONFLAGRATION, Dmg);
                          if(curRes > 0)
                            SendSysMessage(Caster, "Ugasil"+ggm(Caster,3)+" ogien "+GetName(CastOn)+"!", FONT_NORMAL, COLOR_WHITE);
                          elseif(curRes < 0)
                            SendSysMessage(Caster, "Prawie ugasil"+ggm(Caster,3)+" ogien "+GetName(CastOn)+"!", FONT_NORMAL, COLOR_ORANGE);
                          endif
                          
                          curRes := BreakNpcSpecial(CastOn, NSPEC_POLYMORPH, Dmg, "fire");
                          if(curRes > 0)
                            SendSysMessage(Caster, "Ugasil"+ggm(Caster,3)+" ogien "+GetName(CastOn)+"!", FONT_NORMAL, COLOR_WHITE);
                          elseif(curRes < 0)
                            SendSysMessage(Caster, "Prawie ugasil"+ggm(Caster,3)+" ogien "+GetName(CastOn)+"!", FONT_NORMAL, COLOR_ORANGE);
                          endif
                          
                          if(NPCELEM_COLD in Elems)
                            if(CanGetCriminal(Caster, CastOn, TGTOPT_HELPFUL))
                              LogCriminal(Caster, "0", "Rzucil czar typu [ST: "+CrimST+", DT: "+CrimDT+", Ci: "+Circle+"] na Npca [Elem: "+NPCELEM_COLD+"] "+CastOn.name+" ["+CastOn.serial+"] i go uleczyl.");
                            endif

                            HealMobile(CastOn, Dmg, Caster, 1);
                            return;
                          elseif(NPCELEM_FIRE in Elems)
                            Dmg := CInt(Dmg * 1.2);
                          endif

                          Res := CInt(cfgElem.CResist);

        DMGTYPE_ELECTRIC: if(NPCELEM_LIGHT in Elems)
                            if(CanGetCriminal(Caster, CastOn, TGTOPT_HELPFUL))
                              LogCriminal(Caster, "0", "Rzucil czar typu [ST: "+CrimST+", DT: "+CrimDT+", Ci: "+Circle+"] na Npca [Elem: "+NPCELEM_LIGHT+"] "+CastOn.name+" ["+CastOn.serial+"] i go uleczyl.");
                            endif

                            HealMobile(CastOn, CInt(Dmg/2), Caster, 1);
                            return;
                          endif

                          Res := CInt(cfgElem.EResist);
      endcase

      case(SpellType)
        SPTYPE_NONE:
        SPTYPE_MAGE:      if(cfgElem.MResist)
                            AddResistance(Res, CInt(cfgElem.MResist));
                          endif
        SPTYPE_VAMPIRE:
        SPTYPE_NECRO:     if(cfgElem.NResist)
                            AddResistance(Res, CInt(cfgElem.NResist));
                          elseif(NPCELEM_UNDEAD in Elems)
                            AddResistance(Res, DEF_UNDEAD_NRESIST);
                          endif

        SPTYPE_DRUID:     if(cfgElem.DResist)
                            AddResistance(Res, CInt(cfgElem.DResist));
                          elseif(NPCELEM_UNDEAD in Elems)
                            Dmg := CInt(Dmg * 1.2);
                          endif
      endcase
      
      if(Res)
        Dmg := Dmg - CInt(Dmg * (Res * 0.01));
        if(Dmg <= 0)
          Dmg := 1;
        endif
      endif

    endif

    if(IsPlayer(CastOn) and IsPlayer(Caster))
      if(CanMod(CastOn, MOD_RED_SPELL) == 0)
        var Perc := CDbl(GetModAmount(CastOn, MOD_RED_SPELL)) * 0.01;
        Dmg := Dmg - (Dmg * Perc);
      endif
    endif

    if(Dmg <= 0)
      Dmg := 1;
    endif

    if(CanGetCriminal(Caster, CastOn, TGTOPT_HARMFUL))
      LogCriminal(Caster, "0", "Magiczne obrazenia, Typ Czaru ["+CrimST+"], Typ Obrazen ["+CrimDT+"], Krag ["+Circle+"], Cel: "+GetMobCriminalDesc(CastOn));
    endif

    DealDamage(CastOn,Dmg,Caster, MAGIC_DMG);
    CheckTourneyDamage(CastOn,Dmg,Caster);
    
    case(DmgType)
      DMGTYPE_FIRE:              PlaySoundEffect(CastOn, SFX_FIRE1);
      
      
      DMGTYPE_POISON:            PlaySoundEffect(CastOn, 0x206);
                                 PlayObjectCenteredEffect(CastOn, FX_CURSE_EFFECT, 0x0a,0x1e);
                                 
                                 var PoisonLvl := CalcPoisonLevel(Caster, GetMagicSkillID(SpellType), GetMindSkillID(SpellType));
                                 
                                 if(CastOn.isA(POLCLASS_NPC) and IsNpcElemental(CastOn, NPCELEM_POISON))

                                   HealMobile(CastOn, (PoisonLvl * 10), Caster, 1);

                                 else

                                   if(rResult.resisted)
                                     PoisonLvl := ToMin(PoisonLvl - 2, 1);
                                   endif

                                   var iDelay := MAGIC_PLAYER_POISON_DELAY;

                                   if(CastOn.isa(POLCLASS_NPC))
                                     iDelay := MAGIC_NPC_POISON_DELAY;
                                   endif

                                   if(SetPoisonDelay(CastOn, PDTYPE_MAGIC, iDelay, Caster))
                                     SetPoison(CastOn, PoisonLvl, Caster, "Zostal"+ggm(CastOn,3)+" zatrut"+ggm(CastOn,6)+"!");
                                   endif

                                 endif
    endcase
    
    SendDelayedEvent(CastOn, Caster, EVID_ENGAGED, 3);

  endif

endprogram

//-----------------------------------------------------------------------------

function AddResistance(byref Res, Val)

  if(Res)
    Res := Res + CInt((100 - Res) * (Val * 0.01));
  else
    Res := Val;
  endif

endfunction

//-----------------------------------------------------------------------------
  
function ProtectedFromDmg(Caster, CastOn, DmgType, Dmg)

  var Mod;
  case(DmgType)
    DMGTYPE_FIRE:        Mod := MOD_FIRERESIST;
    DMGTYPE_COLD:        Mod := MOD_COLDRESIST;
    DMGTYPE_ELECTRIC:    Mod := MOD_LIGHTRESIST;
    default:             return Dmg;
  endcase

  if(CanMagicMod(CastOn, Mod) and CanMod(CastOn, Mod) != 0)
    return Dmg;
  elseif(IsPlayer(Caster) and IsPlayer(CastOn) and !CanMagicMod(CastOn, Mod))
    return Dmg;
  endif

  var MagicItem := GetMagicModItem(CastOn, Mod);
  if(MagicItem and !IsArtifact(MagicItem))
    if(!CheckMagicSuffixItemCharges(MagicItem,CastOn))
      return Dmg;
    endif
    SetMagicItemSuffixCharges(MagicItem,GetMagicItemSuffixCharges(MagicItem) - 1 );
  endif

  var MagicItemResist := GetTempModAmount(CastOn, Mod);
  if(MagicItemResist)
    MagicItemResist := ((100 - Cint(MagicItemResist * 2)) * 0.01);
    Dmg := Cint(Dmg * MagicItemResist);
  endif

  case(DmgType)
    DMGTYPE_FIRE:        PlayPcEffect(CastOn, FX_HEAL_EFFECT, 542, 0x10, 0xA, 3);
    DMGTYPE_COLD:        PlayPcEffect(CastOn, FX_HEAL_EFFECT, 1151, 0x10, 0xA, 0);
    DMGTYPE_ELECTRIC:    PlayPcEffect(CastOn, FX_HEAL_EFFECT, 94, 0x10, 0xA, 3);
  endcase

  return Dmg;

endfunction

//-----------------------------------------------------------------------------
