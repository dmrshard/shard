//-----------------------------------------------------------------------------

include ":magic:magic";
include "include/gumps";
include "include/portals";

//-----------------------------------------------------------------------------

const SPELL_ID    := 103;
const BLOOD_COLOR := 38;

//-----------------------------------------------------------------------------

program CastSanctuarium( nSpellParms )

  SpellCast(nSpellParms, SPELL_ID, TRGT_NONE);

endprogram

//-----------------------------------------------------------------------------

function SpellAction(Caster, Cast)

  __ParamUnused(Cast);

  if(NoTeleportZone(Caster.x, Caster.y, Caster.z, Caster.realm))
    Fizzle(Caster, "Miejsce w ktorym sie znajdujesz nie pozwala Ci na przyzwanie portalu...");
    return;
  endif
  
  if(IsWaterInRange(Caster.x,Caster.y,Caster.z,Caster.realm, 10))
    Fizzle(caster, "Nie mozesz przywolac portalu, jestes zbyt blisko wody.");
    return;
  endif

  var Loc := SelectSanctLoc(Caster);

  if(Loc)
    if(!CanOpenGateAt(Caster, Loc))
      Fizzle(Caster, "Twoj portal zawiodl...");
      return;
    endif

    if(coordist(Caster.x, Caster.y, Loc.x, Loc.y) < 3 and Caster.realm == Loc.realm)
      Fizzle(Caster, "Znajdujesz sie w miejscu docelowym...");
    else
      CreateGateTravel(Caster.x, Caster.y, Caster.z, Caster.realm, Loc.x, Loc.y, Loc.z, Loc.realm, CGTF_BLACK_GATE);
    endif
  else
    Fizzle(Caster, "Anulowano.");
  endif

endfunction

//-----------------------------------------------------------------------------

function SelectSanctLoc(Caster)

  var sCfg := ReadConfigFile(":vampire:sancts");
  var oLoc  := struct;
  
  oLoc.+x     := Caster.x;
  oLoc.+y     := Caster.y;
  oLoc.+z     := Caster.z;
  oLoc.+realm := Caster.realm;
  
  var Res  := SendSelSanctGump(Caster, sCfg);

  if(Res)
    if(oLoc.x != Caster.x or oLoc.y != Caster.y or oLoc.z != Caster.z or oLoc.realm != Caster.realm)
      SendSysMessage(Caster, "Oddalil"+ggm(Caster,3)+" sie.", FONT_NORMAL, COLOR_RED);
      return 0;
    endif

    var Loc := SplitWords(sCfg[Res].Loc);
    if(Loc)
      var rLoc := struct;
      rLoc.+x     := CInt(Loc[1]);
      rLoc.+y     := CInt(Loc[2]);
      rLoc.+z     := CInt(Loc[3]);
      rLoc.+realm := Loc[4];

      return rLoc;
    endif
  endif

  return 0;

endfunction

//-----------------------------------------------------------------------------

function SendSelSanctGump(Caster, sCfg)

  GInit();
  GNoDispose();
  GResPic(130,60,3600,300,300);
  GGumpPic(20,20,61);
  GPage();

  GAddPageData(160,310,5603,5607,380,310,5601,5605);
  var Exist := 0;
  var Loc;
  foreach sId in GetConfigIntKeys(sCfg)
    Loc := SplitWords(sCfg[sId].Loc);
    //__NONPVP__ DELETED if(IsInNonPvPArea(Caster.x, Caster.y, Caster.realm) == IsInNonPvPArea(CInt(Loc[1]), CInt(Loc[2]),Loc[4]))
      GCheckNextPage(8);
      GButton(200,105+(GNPCount()*25),2103,2104,sId);
      GTextLine(220,100+(GNPCount()*25),590,sCfg[sId].Name);
      Exist := 1;
    //endif
  endforeach
  if(!Exist)
   GButton(200,105+(GNPCount()*25),2103,2104,0);
   GTextLine(220,100+(GNPCount()*25),590,"Brak lokacji");
  endif

  

  return GSend(Caster)[0];

endfunction

//-----------------------------------------------------------------------------

function CanOpenGateAt(who, Loc)

  if(NoTeleportZone(Loc.x, Loc.y, Loc.z, Loc.realm, TCF_NOCHECK_DUNG | TCF_CHECK_CHAMP))
    return 0;
  endif

  if(NoTeleportZone(who.x, who.y, who.z, who.realm))
    return 0;
  endif

  if(who.realm != Loc.realm and (who.realm == BRITA_REALM or Loc.realm == BRITA_REALM))
    return 0;
  endif

  return 1;

endfunction

//-----------------------------------------------------------------------------
