//-----------------------------------------------------------------------------

include "include/bits";
include "include/gumps";
include "include/client/fonts";
include "include/misc";
include "include/cmds/cancmd";
include "include/cmds/uof";
include "include/cmds/misc";
include "include/player/target";
include "include/names";

//-----------------------------------------------------------------------------

program ProcessView(who,text)

  if(!CanUseCmd(who, "pst"))
    return;
  endif

  var sptext := SplitWords(text);

  case(sptext[1])
    "gcl":              ShowGlobalClients(who);
                        return;
  endcase

  SendSysMessage(who,"Wskaz osobe.",FONT_NORMAL,COLOR_GREEN);

  var Trg := ObjTarget(who);

  if(!Trg or !IsPlayer(Trg) or (Trg.cmdlevel and !IsAdmin(who)))
    SendSysMessage(who,"Anulowano.",FONT_NORMAL,COLOR_RED);
    return;
  endif

  if(!IsLoggedIn(Trg))
    SendSysMessage(who,"Osoba nie jest zalogowana.", FONT_NORMAL, COLOR_RED);
    return;
  endif

  var Cmd    := 0;
  var iParam := 0;
  var sMsg   := "";

  case(sptext[1])
    "file":             if(!sptext[2])
                          SendSysMessage(who, "Brak nazwy pliku.", FONT_NORMAL, COLOR_RED);
                        else
                          ShowClientFileInfo(who, sptext[2], Trg);
                        endif
                        return;

    "files":            Cmd  := CUOMW_CMD_FILES;
                        sMsg := "Sprawdzanie plikow UO.";

    "ver":              Cmd  := CUOMW_CMD_VER;
                        sMsg := "Sprawdzenie wersji MW Gate.";

    "sys":              Cmd  := CUOMW_CMD_SINFO;
                        sMsg := "Sprawdzenie systemu.";

    "mwgid":            Cmd  := CUOMW_CMD_GID;
                        sMsg := "Sprawdzenie MwGid.";

    "client":           Cmd  := CUOMW_CMD_VERCLIENT;
                        sMsg := "Weryfikacja klienta.";

    "modules":          Cmd  := CUOMW_CMD_MOD;
                        if(!CInt(sptext[2]))
                          SendSysMessage(who, "Nie wpisano ID modulu.", FONT_NORMAL, COLOR_RED);
                          return;
                        endif
                        sMsg := "Moduly procesu "+hex(CInt(sptext[2]))+".";
                        iParam := CInt(sptext[2]);

    "genid":            if(IsAdmin(who))
                          Cmd  := CUOMW_CMD_GENID;
                          sMsg := "Generowanie nowego MwGId.";
                        endif
  endcase

  if(!Cmd)
    Cmd  := CUOMW_CMD_PROC;
    sMsg := "Sprawdzanie procesow.";
  endif

  SendSysMessage(who, sMsg, FONT_NORMAL, COLOR_GREEN);

  var Packet;
  
  if(iParam)
    Packet := SendMwgIntCmd(Trg, Cmd, iParam);
  else
    Packet := SendMwgCmd(Trg, Cmd);
  endif

  if(!Packet)
    SendSysMessage(who,"Nie udalo sie wyslac pakietu.",FONT_NORMAL,COLOR_GREEN);
    return;
  endif

  BuildMwgGump(who, Trg, Packet);

endprogram

//-----------------------------------------------------------------------------

function BuildMwgGump(who, Trg, Packet)

  var Cmd := Packet.GetInt8(3);

  if(!Cmd)
    SendSysMessage(who, "Odebrano pakiet bez CmdId.", FONT_NORMAL, COLOR_RED);
    return;
  endif
  
  var OsId     := Packet.GetInt32(8);
  var OsVer    := Packet.GetInt32(12);
  var PtVer    := Packet.GetInt32(16);
  var TypeName := "Procesy";
  var Pos      := 20;

  case(Cmd)
    CUOMW_CMD_MOD:    var ProcId := Packet.GetInt32(Pos);
                      TypeName   := "Moduly procesu "+hex(ProcId);

    CUOMW_CMD_VER:    TypeName   := "Sprawdzanie wersji VF Gate";

    CUOMW_CMD_GID:    TypeName   := "Sprawdzanie MwGId";
    
    CUOMW_CMD_FILES:  TypeName   := "Sprawdzanie plikow UO";

    CUOMW_CMD_SINFO:  TypeName   := "System Info";
  endcase
  
  var OsInfo;

  case(OsId)
    0:  OsInfo := "WIN32s (3.1)";
    1:  OsInfo := "WIN32 Windows (95/98)";
    2:  OsInfo := "WIN32 NT (XP/2k)";
    3:  OsInfo := "WIN32 CE";
  endcase

  OsInfo := OsInfo + " Ver: "+OsVer;
  
  GInit(20,20);
  GPage(0);
  GResPic(0,0,BKGND_BLACKSLAB,600,450);
  GTextLine(20,40,999,OsInfo);
  GTextLine(300,40,600,"MW Gate: v"+VerToStr(PtVer));
  GTextLine(300,20,999, GetRealName(Trg)+" / "+Trg.acctname);

  GAddPageData(565,25,2650,2651,565,413,2648,2647);

  case(Cmd)
    CUOMW_CMD_SINFO:   GTextLine(20,20,500,TypeName);

                       GTextLine(20,  67, 550, "OemID");
                       GTextLine(150, 67, 550, Packet.GetInt32(Pos));
                       Pos := Pos + 4;
                       GTextLine(20,  87, 550, "PageSize");
                       GTextLine(150, 87, 550, Packet.GetInt32(Pos));
                       Pos := Pos + 4;
                       GTextLine(20,  107,550, "ActiveProcessorMask");
                       GTextLine(150, 107,550, Packet.GetInt32(Pos));
                       Pos := Pos + 4;
                       GTextLine(20,  127,550, "NumberOfProcessors");
                       GTextLine(150, 127,550, Packet.GetInt32(Pos));
                       Pos := Pos + 4;
                       GTextLine(20,  147,550, "ProcessorType");
                       GTextLine(150, 147,550, Packet.GetInt32(Pos));
                       Pos := Pos + 4;
                       GTextLine(20,  167,550, "AllocationGranularity");
                       GTextLine(150, 167,550, Packet.GetInt32(Pos));
                       Pos := Pos + 4;
                       GTextLine(20,  187,550, "ProcessorLevel");
                       GTextLine(150, 187,550, Packet.GetInt16(Pos));
                       Pos := Pos + 2;
                       GTextLine(20,  207,550, "ProcessorRevision");
                       GTextLine(150, 207,550, Packet.GetInt16(Pos));
                       Pos := Pos + 2;
                       GTextLine(20,  227,550, "CPU Freq Low");
                       GTextLine(150, 227,550, Packet.GetInt32(Pos));
                       Pos := Pos + 4;
                       GTextLine(20,  247,550, "CPU Freq High");
                       GTextLine(150, 247,550, Packet.GetInt32(Pos));

    CUOMW_CMD_FILES:   GTextLine(20,20,500,TypeName);

                       var i := 67;
                
                       AddFileInfo(i,Pos,Packet,CUO_MAP_FILE,0);
                       AddFileInfo(i,Pos,Packet,CUO_MAP_FILE,1);
                       AddFileInfo(i,Pos,Packet,CUO_MAP_FILE,2);
                       AddFileInfo(i,Pos,Packet,CUO_MAP_FILE,3);
                       AddFileInfo(i,Pos,Packet,CUO_STC_FILE,0);
                       AddFileInfo(i,Pos,Packet,CUO_STC_FILE,1);
                       AddFileInfo(i,Pos,Packet,CUO_STC_FILE,2);
                       AddFileInfo(i,Pos,Packet,CUO_STC_FILE,3);
                       AddFileInfo(i,Pos,Packet,CUO_ART_FILE,0);
                       AddFileInfo(i,Pos,Packet,CUO_ANM_FILE,0);
                       AddFileInfo(i,Pos,Packet,CUO_GMP_FILE,0);
                       AddFileInfo(i,Pos,Packet,CUO_MLT_FILE,0);
                       AddFileInfo(i,Pos,Packet,CUO_SKL_FILE,0);
                       AddFileInfo(i,Pos,Packet,CUO_TLD_FILE,0);
                       AddFileInfo(i,Pos,Packet,CUO_VDT_FILE,0);

   CUOMW_CMD_VERCLIENT: var ChClient := Packet.GetInt8(Pos);
                       if(!ChClient)
                         var edLen := Packet.GetInt8(21);
                         var fdErr := Packet.GetString(22,edLen);
                         var esLen := Packet.GetInt8(22+edLen);
                         var fsErr := Packet.GetString(23+edLen,esLen);
                         GTextLine(20, 67, 1206, "Zly klient: ["+fdErr+"] R:["+fsErr+"]");
                       else
                         GTextLine(20, 67, 1419, "Dobry klient");
                       endif
                
    CUOMW_CMD_VER:     GTextLine(20,20,500,TypeName);

    CUOMW_CMD_GENID:
    CUOMW_CMD_GID:     GTextLine(20,20,500,TypeName);
                       GTextLine(20,  67, 550, "MwGId");
                       GTextLine(150, 67, 550, Packet.GetInt32(Pos));
                       GTextLine(20,  87, 550, "PdId");
                       GTextLine(150, 87, 550, Packet.GetString(Pos+4, Packet.GetSize()-Pos-4));
    
    CUOMW_CMD_PROC:    var Num  := Packet.GetInt16(Pos);
                       var aNum := Packet.GetInt16(Pos+2);
                       Pos := Pos + 4;

                       var Procs := PcExtractProcInfo(Packet, Num);

                       TypeName := TypeName + " " + Num +"/"+ aNum;
                       GTextLine(20,20,500,TypeName);

                       PcBuildProcInfo(Procs);

    CUOMW_CMD_MOD:
                       var i,tLen;
                       var ProcId := Packet.GetInt32(Pos);
                       Pos := Pos + 4;
                       var Num  := Packet.GetInt16(Pos);
                       var aNum := Packet.GetInt16(Pos+2);
                       Pos := Pos + 4;

                       if(!ProcId)
                         TypeName := TypeName + " Brak";
                       else
                         TypeName := TypeName + " " + Num +"/"+ aNum;
                       endif

                       GTextLine(20,20,500,TypeName);

                       if(ProcId)
                       
                         for(i:=0;i<Num;i:=i+1)
                           if(Pos >= Packet.GetSize())
                             break;
                           endif

                           tLen   := Packet.GetInt8(Pos);
                           Pos    := Pos + 1;

                           GCheckNextPage(18);
                           GTextLine(100,(67+(GNPCount()*20)),570,Packet.GetString(Pos,tLen));

                           Pos := Pos + tLen;
                         endfor

                       endif
  endcase
  
  GSend(who);

endfunction

//--------------------------------------------------------------------------------

function AddFileInfo(byref i,byref Pos,Packet,FileId,Flags)

  var IdxName := GetIdxName(FileId,Flags);
  var MulName := GetMulName(FileId,Flags);

  var fSize := Packet.GetInt32(Pos);
  GTextLine(20,i,570,MulName);
  if(fSize == -1)
    GTextLine(120,i,1206,"Brak");
  else
    GTextLine(120,i,1419,FormatSize(fSize)+" b");
  endif
  Pos := Pos + 4;
  
  if(IdxName)
    fSize := Packet.GetInt32(Pos);
    GTextLine(250,i,570,IdxName);
    if(fSize == -1)
      GTextLine(350,i,1206,"Brak");
    else
      GTextLine(350,i,1419,FormatSize(fSize)+" b");
    endif
    Pos := Pos + 4;
  endif
  
  if(FileId == CUO_VDT_FILE)
    var Num  := Packet.GetInt8(Pos+4);
    Pos := Pos + 5;
    
    var n,x := 40;
    i := i + 20;
    
    for(n:=0;n<Num;n:=n+1)
      GTextLine(x,i,590,GetVdtFileName(Packet.GetInt32(Pos))+": "+Packet.GetInt32(Pos+4));
      Pos := Pos + 8;
      x := x + 80;
      if(x == 280)
        x := 40;
        i := i + 20;
      endif
    endfor

    i := i + 20;
  
  endif
  
  i := i + 20;

endfunction

//--------------------------------------------------------------------------------

function GetVdtFileName(Type)

  case(Type)
    0x00: return "map0.mul";
    0x01: return "staidx0.mul";
    0x02: return "statics0.mul";
    0x03: return "artidx.mul";
    0x04: return "art.mul";
    0x05: return "anim.idx";
    0x06: return "anim.mul";
    0x07: return "soundidx.mul";
    0x08: return "sound.mul";
    0x09: return "texidx.mul";
    0x0A: return "texmaps.mul";
    0x0B: return "gumpidx.mul";
    0x0C: return "gumpart.mul";
    0x0D: return "multi.idx";
    0x0E: return "multi.mul";
    0x0F: return "skills.idx";
    0x10: return "skills.mul";
    0x1E: return "tiledata.mul";
    0x1F: return "animdata.mul";
  endcase
  
  return "?"+Type+"?";

endfunction

//--------------------------------------------------------------------------------

function GetMulName(Type,Flags)

  case(Type)
  
    CUO_MLT_FILE:  return CUO_MLT_MUL;
    CUO_SKL_FILE:  return CUO_SKL_MUL;
    CUO_VDT_FILE:  return CUO_VDT_MUL;
    CUO_TLD_FILE:  return CUO_TLD_MUL;
    CUO_SND_FILE:  return CUO_SND_MUL;
    CUO_GMP_FILE:  return CUO_GMP_MUL;
    CUO_ART_FILE:  return CUO_ART_MUL;

    CUO_ANM_FILE:  case(Flags)
                     0: return CUO_ANM_MUL;
                     2: return CUO_ANM2_MUL;
                     3: return CUO_ANM3_MUL;
                   endcase

    CUO_MAP_FILE:  case(Flags)
                     0: return CUO_MAP0_MUL;
                     1: return CUO_MAP1_MUL;
                     2: return CUO_MAP2_MUL;
                     3: return CUO_MAP3_MUL;
                   endcase

    CUO_STC_FILE:  case(Flags)
                     0: return CUO_STC0_MUL;
                     1: return CUO_STC1_MUL;
                     2: return CUO_STC2_MUL;
                     3: return CUO_STC3_MUL;
                   endcase
  endcase
  
  return "";

endfunction

//--------------------------------------------------------------------------------

function GetIdxName(Type,Flags)
  case(Type)

    CUO_MLT_FILE:  return CUO_MLT_IDX;
    CUO_SKL_FILE:  return CUO_SKL_IDX;
    CUO_ART_FILE:  return CUO_ART_IDX;
    CUO_GMP_FILE:  return CUO_GMP_IDX;
    CUO_SND_FILE:  return CUO_SND_IDX;

    CUO_STC_FILE:  case(Flags)
                     0: return CUO_STC0_IDX;
                     1: return CUO_STC1_IDX;
                     2: return CUO_STC2_IDX;
                     3: return CUO_STC3_IDX;
                   endcase

    CUO_ANM_FILE:  case(Flags)
                     0: return CUO_ANM_IDX;
                     2: return CUO_ANM2_IDX;
                     3: return CUO_ANM3_IDX;
                   endcase
  endcase

  return "";
  
endfunction

//-----------------------------------------------------------------------------

function ShowGlobalClients(who)

  GInit(20,20);
  GPage(0);
  GResPic(0,0,BKGND_BLACKSLAB,600,450);

  GTextLine(20, 20, 999, "Wszystkie osoby online");
  GAddPageData(565,25,2650,2651,565,413,2648,2647);

  var Chk, Delay, AllDelay := ReadMilliSecondClock();

  foreach Client in EnumerateOnlineCharacters()
    if(!IsLoggedIn(Client))
      continue;
    endif
    Delay := ReadMilliSecondClock();
    Chk := CheckUoClient(Client);
    GCheckNextPage(19);
    GTextLine(500, (47+(GNPCount()*20)), 670, (ReadMilliSecondClock()-Delay)+"ms");
    GTextLine(30 , (47+(GNPCount()*20)), 570, GetRealName(Client)+"/"+Client.acctname);

    if(Chk == -1)
      GTextLine(250,(47+(GNPCount()*20)),999,"Brak odpowiedzi");
    elseif(Chk == error)
      GTextLine(250,(47+(GNPCount()*20)),1206,"Zly klient: "+Chk.errortext);
    else
      case(Chk)
        1:       GTextLine(250,(47+(GNPCount()*20)),1419,"Dobry klient");
        default: GTextLine(250,(47+(GNPCount()*20)),670,"Bledna zwrotna zmienna ("+Chk+")");
      endcase
    endif
  endforeach

  GTextLine(500, 20, 670, (ReadMilliSecondClock()-AllDelay)+"ms");
  GSend(who);

endfunction

//-----------------------------------------------------------------------------

function ShowClientFileInfo(who, fName, Targ)

  SendSysMessage(who, "Sprawdzanie pliku "+fName+"...", FONT_NORMAL, COLOR_GREEN);

  GInit(20,20);
  GResPic(0,0,BKGND_BLACKSLAB,600,450);

  GTextLine(30 ,20,570, GetRealName(Targ)+"/"+Targ.acctname);
  GTextLine(300 ,20,550, "Check: "+fName);

  var FileInfo := GetFileSpecs(Targ, fName);

  if(FileInfo == -1)
    GTextLine(30,70,999, "Brak odpowiedzi");
  else
    GTextLine(30,70,550, FileInfo[1]);
    if(FileInfo[2] == -1)
      GTextLine(200,70,1206,"Brak pliku");
    else
      GTextLine(200,70,1419,FormatSize(FileInfo[2])+" b");
    endif
  endif

  GSend(who);

endfunction

//-----------------------------------------------------------------------------
